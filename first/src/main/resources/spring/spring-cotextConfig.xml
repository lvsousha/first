<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.stone.service" annotation-config="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

    <!-- 采用注释的方式配置bean -->
    <context:annotation-config />
    <!-- 数据库配置文件位置 -->

    <context:property-placeholder location="classpath:properties/sqlserver/jdbc.properties" />

    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象
    加载Spring配置文件时，如果Spring配置文件中所定义的Bean类实现了ApplicationContextAware 接口，
    那么在加载Spring配置文件时，会自动调用ApplicationContextAware 接口中的
     public void setApplicationContext(ApplicationContext context) throws BeansException
          方法，获得ApplicationContext对象
    -->
	<bean class="com.stone.common.SpringContextHolder" lazy-init="false" />

    <!-- 配置jdbc数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!--proxy-target-class="true"强制使用cglib代理   如果为false则spring会自动选择
    <aop:aspectj-autoproxy  proxy-target-class="true"/>-->

    <!-- 配置mybitasSqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis.xml" />
        <property name="typeAliasesPackage" value="com.zcl.dao" />
        <property name="mapperLocations" value="classpath*:mybatis/zcl/*.xml" />
    </bean>

    <!-- Freemarker配置 -->
	<bean id="freemarkerConfig"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	    <property name="templateLoaderPath" value="/content/" />
	    <property name="freemarkerSettings">
	        <props>
	            <prop key="template_update_delay">0</prop>
	            <prop key="default_encoding">UTF-8</prop>
	            <prop key="number_format">0.##########</prop>
	            <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
	            <prop key="classic_compatible">true</prop>
	            <prop key="template_exception_handler">ignore</prop>
	        </props>
	    </property>
	</bean>

    <!-- 配置SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zcl.dao"/>
    </bean>

    <!-- <import resource="classpath*:spring/spring-shiro.xml" /> -->

</beans>